Concepts

	Security involves two primary functions:

		1. Authentication - Determine someone's identity.
		2. Authorization - Determine what that person can do and enforce those rules.

Code

	Notes:
		When the WebApp was originally created, we chose "Individual User Accounts" as the authenication type.

	In startup.cs -> Startup class -> ConfigureServices(...)		// configure services
		services.AddIdentity<ApplicationUser, IdentityRole>( ...
			Here we set authentication options for inactivity timeout, password lenght, login attempts, email confirmation, etc.
		services.AddAuthorization( ...
			Here we define authorization policies and the claims that they represent
				POLICY			CLAIMS
				SysAdmin			Administrator AND System
				PhillyEditor		Editor AND Philadelphia
				BbhEditor		Editor AND Boothbay Harbor

	In startup.cs -> Startup class -> Configure(...)				// configure the MVC pipeline
		app.UseIdentity();
		app.UseGoogleAuthentication( ... ) ...
			Here we set the Google ClientId and ClientSecret

	Under WbApp\Features\Account are the controllers and view for handling Authentication.

	Within the other controllers, we can do authorization based on policies and claims.

		In Features\Admin\AdminController.cs, we check that the user satisfies the SysAdmin policy:

		[Authorize("SysAdmin")]
		public class AdminController : Controller


Latest asp.net Identity services

	UseIdentity is deprecated. We need to instead use UseAuthentication. See:
	https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?tabs=visual-studio%2Caspnetcore2x
